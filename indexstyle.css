header {
    background-color: blanchedalmond;
}
footer {
    background-color: papayawhip;
}
header, footer {
    padding: 15px;
}

body {
    margin: 0px;
}
main {
    margin: 10px;
}

header h1, header p {
    margin: 0px
}
.navbar ul {
    list-style-type: none;
    background-color: azure;
    padding: 0px;
    margin: 0px;
    overflow: hidden;
}
.navbar li {
    float: left
}
.navbar a {
    color: teal;
    text-decoration: none;
    padding: 15px;
    display: block;
    text-align: center;
}
.navbar a:hover {
    background-color: rgb(224, 250, 255);
}


.box {
    border: solid 2px black; 
    width:25%;
    padding:20px;
    box-sizing: border-box;
    float: left;
}
.exl li {
    max-width: 480px;
}
.exl li:hover {
    background-color: lightyellow;
}
.exl li:not(:hover) {
    color:darkslategray;
}
.exl li:nth-child(1){ /* could also be odd and even */
    font-style: italic;
}
.exl.latin li:nth-child(odd) {
    font-style:italic;
}
.exl.latin li:nth-child(3n + 1) {
    color:rgb(62, 145, 109)
}

.flexcontainer {
    border: solid 3px darkslategray;
    width: auto;
    height: 210px;
    border-radius: 13px;

    padding: 0px;
    column-gap: 10px;
    row-gap: 10px;

    /* flex changes the display of children, but the element itself still takes the entirety of width available */
    /* display: flex makes the element a flexbox; display: flexbox does not exist! (autosuggestion by vscode because the word appears elsewhere) */
    display: flex;
    /* defaul direction is row, but they can be arranged vertically by setting it to column */
    flex-direction: row;
    /* justification is the horizontal alignment */
    /* default is flex-start, justification to the left; and flex-end is justification to the right */
    /*     justifying content with space-between spreads the elements evenly */
    /* ... space-around equalises the 'margins' from element to the divisions; i.e. gaps between elements are twice the gaps to the sides */
    /* ... space-evenly equalises the spaces between elements and borders of the viewport as well */
    justify-content: start;
    /* align-tems takes the same options as justification of content */
    /* but this is justifies them around the cross axis */
    /* remember that multiple rows is done with a flexbox(dir: col) with row flexboxes */
    /* so all items inside a flex container are placed in its direction, */
    /* ... and then the whole row or column is aligned with align-items */
    /* there is also align-items baseline, which does something with text but is similar to flex-start otherwise*/
    /* does not work with wrap either! */
    align-items: flex-start;
    /* previous information was a bit of a lie, because you could have multiple rows of elements if one row doesn't fit */
    /* normally the elements would get squished, but wrapping them place them onto the next line */
    flex-wrap: nowrap;
    /* to set the alignment of multiple rows of items due to wrapping, use align-content */
    /* when aligning content to flex-end, use reversed flex-wrap */
    align-content: flex-start;
}
.boxinflex {
    width: 100px;
    height: 100px;
    font-size: 4em;
    font-weight: bold;
    color: purple;
    text-align: center;
    align-content: center;
    border-radius: 10px;
}
#box1 {
    background-color: goldenrod;
}
#box2 {
    background-color: burlywood;
    /* does not work with wrap */
    align-self: center;
}
#box3 {
    background-color: mistyrose; 
}
#box4 {
    background-color: aquamarine;
    /* 1 is end, -1 is the beginning */
    order: -1;
}

.transformcontainer {
    display: flex;
    height: 140px;
    padding-left: 30px;
    column-gap: 10px;
}
.transformbox {
    width: 100px;
    height: 100px;
    font-size: 3em;
    font-weight: normal;
    color: rgb(255, 255, 255);
    background-color: rgb(66, 66, 66);
    text-align: center;
    align-content: center;
    border-radius: 10px;
}
#skew {
    transform: skew(-30deg, 10deg);
}
#rotate {
    transform: translateY(20px) rotateZ(45deg);
}
#translate {
    transform: translate(12px, 24px);
}
#scale {
    transform: scale(0.8);
}
#skewrotate {
    transform: skew(-30deg, 30deg);
    margin: 40px;
}

.scalecontainer {
    margin-left: 20px;
    display: flex;
    height: 80px;
    width: 80px;
    background-color: rgb(246, 225, 172);
}
#scaledbox {
    border: solid 3px rgb(108, 108, 108);
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    transform: scaleX(1.4) scaleY(0.6);
}

#animationlink {
    text-decoration: none;
    color: maroon;
    background-color: rgb(247, 231, 201);
    padding: 10px;
    border-radius: 5px;
}
#animationlink:hover {
    background-color: rgb(247, 239, 224);
}